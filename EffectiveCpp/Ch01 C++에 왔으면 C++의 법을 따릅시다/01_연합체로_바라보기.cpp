/*
날짜 : 2023. 12. 09
이름 : 배성훈
내용 : C++를 언어들의 연합체로 바라보는 안목은 필수
	교재 51 ~ 53p

	C++의 처음 이름이 클래스를 쓰는 C

	오늘날의 C++는 다중패러다임 프로그래밍 언어(multiparadigm programming language)
	절차적 프로그래밍을 기본으로 하여 객체 지향, 함수식, 일반화 프로그래밍을 포함며
	메타프로그래밍 개념까지 지원

	C++을 이해할 때는 C++를 단일 언어로 바라보는 눈을 넓혀, 
	상관 관계가 있는 여러 언어들의 연합체(federation)로 보는 것

	C++ 를 이해하러면 여러 개의 하위 언어(sublanguage)를 제공한다는 점을 새기고 있어야 한다
	C, 객체 지향 개념의 C++, 템플릿 C++, STL

	C 
		블록, 문장, 선행 처리자, 기본제공 데이터타입, 배열, 포인터 등 모든 것이 C에서 왔다
		그보다 월등한 C++만의 것들이 상당히 많이 제공되고 있긴 하지만(오버로딩, 템플릿 등)

	객체 지향 개념
		클래스를 쓰는 C에 관한 것이 모두 해당
		클래스(생성자와 소멸자 개념까지), 캡슐화, 상속, 다형성, 가상 함수(동적 바인딩) 등

	템플릿
		템플릿 메타프로그래밍(template metaprogramming : TMP)
		TMP의 세계는 주류 C++ 프로그래밍과 맞닿아 돌아가지 않는 조금 다른 세계

	STL
		컨테이너(container), 반복자(iterator), 알고리즘(algorithm)과 함수 객체(function object)가 만수산 드렁칡처럼
		얽혀 돌아가는 것을 규약

	사용자 정의 생성자/소멸자 개념이 생기면서 상수 객체 참조자에 의한 전달(pass-by-reference-to-const) 방식이 더 좋은 효율을 보인다
	STL 쪽으로 넘어오면 반복자와 함수 객체가 C의 포인터를 본떠 만든 것이란 점을 알게 되고, 
	그렇기 때문에 STL의 반복자 및 함수 객체에 대해서는 값 전달에 대한 규칙이 다시 제 힘을 발휘

	C++를 사용한 효과적인 프로그래밍 규칙은 경우에 따라 달라진다
	그 경우란 바로 C++의 어떤 부분을 사용하느냐에 따라 다르다!
*/