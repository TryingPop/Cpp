/*
날짜 : 2024. 6. 17
이름 : 배성훈
내용 : 인라인(inline) 함수
	교재 p33 ~ 36

	C언어에서 매크로 함수의 대표적인 장점은
	일반적인 함수에 비해서 실행속도의 이점이 있다
	반면 매크로 함수의 단점은
	정의하기가 어렵고, 복잡한 함수를 매크로의 형태로 정의하는데 한계가 있다
	매크로 함수의 몸체 부분이 함수호출 문장을 완전히 대체했을 때
	함수가 인라인화 되었다고 표현을 한다

	매크로 함수의 장점은 유지를 하되 단점을 제거하면 좋겠다
	매크로 함수는 정의하기가 복잡하니, 일반함수처럼 정의 해주는 기능이
	C++의 인라인 함수는 이러한 요구사항을 100% 만족한다

	매크로 함수의 인라인화는 전처리기에 의해서 처리되지만,
	키워드 inline을 이용한 함수의 인라인화는 컴파일러에 의해서 처리가 된다
	따라서 컴파일러는 함수의 인라인화가 오히려 성능에 해가 된다고 판단할 경우 
	이 키워드를 무시해버리기도 한다

	반대로 필요한 경우 일부 함수를 임의로 인라인 처리하기도 한다

	아래 인라인 함수는 매크로 하무의 장점을 완전히 대체하지 못한다
	매개변수가 int형만 받을 수 있기에 3.15를 넣으면 데이터 손실이 발생한다
	즉 자료형에 의존적이다 이는 나중에 나오는 템플릿으로 대체가 가능하긴 하다
*/

#include <iostream>

#ifdef TEMPLATE
// template 기능
template <typename T>
inline T SQUARE(T _x)
{

	return _x * _x;
}

#else
inline int SQUARE(int _x)
{

	return _x * _x;
}
#endif

int main(void)
{

	std::cout << SQUARE(5) << std::endl;
	std::cout << SQUARE(12) << std::endl;

	return 0;
}